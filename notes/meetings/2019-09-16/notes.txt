Discussion of the "high road" (Xavier's term):
* rebuilding something like OCaml (possibly simpler, cleaner)
  from scratch, starting from Inferno.

Discussion of the "low road":
* refactoring the existing type-checker
* problem: the reviewing load will be high (especially for Jacques)
* Jacques says it's ok to discuss the high-level ideas,
  but painful/impossible to review the code itself
* Xavier wants discussion on high-level ideas, more than one the code

Didier asks whether the two roads are supposed to meet eventually.

Jacques says that Thomas Refis is the one who is currently working most
on the "low road" (the type-checker). E.g. Thomas has clarified the notion
of "scope", etc. Also, Leo White has done some work on the type-checking
of objects and classes (not yet reviewed and merged; it was discussed in
March 2019 but the requested follow-up work was not done).

François asks whether it would be worthwhile to work on strengthening
the test suite.
* Xavier mentions fuzzing;
  it could be very useful if the type-checker contains assertions
* Florian & Sébastien had an Outreachy intern (Oxana)
  who worked on checking the coverage of the test suite.
  It would be good to continue and finalize this work.
  (Gabriel had an Outreachy intern (Ulugbek) working on quickchecking
   the compiler by randomly generating well-typed programs. Could also
   be of interest.)

Didier asks whether the code should be commented (either inside the code,
or in a separate file containing explanations). Damien notes that some PRs
begin with a long explanation. But it is not visible in a cloned repository!

Sébastien asks where we should invest our energy and expertise. (Who should
work on what?) E.g. Sébastien might be interested in working on refactoring
the type-checker.

What are our forces?
* Gabriel Radanne
* Leo White?
* Thomas Refis??? (will be doing a PhD with Didier, hence *scientific work*)
* Sébastien could have some time after March 2020

Someone mentions the technology that allows rapidly rebuilding all opam packages so as to test a change. Do we master it? Florian knows about "opam-check" (Damien's tool); works, but not yet parallel. (It should be!)  Armaël & Gabriel have worked on another approach (also on top of opam) which is parallel. Still experimental, to be finished. And what about the OCaml Labs tools? Damien notes that many opam packages have broken dependencies, which complicates things. (Would it be easy to automatically check that no dependencies are missing in a package description?) (Damien notes that it would be useful to know which modules are installed by which packages.)

Didier asks to what extent it is permitted to change the type system (intentionally). E.g. we might wish to change the treatment of first-class polymorphism. (Didier has the "high road" in mind.) There seems to be
consensus that in the high road it is permitted & desirable to do so.

Some discussion of -principal, which is needed to infer principal types in the presence of first-class polymorphism, but is costly because it imposes copying instead of sharing.

Sébastien notes the need to organize another meeting, including developers outside Inria, and to keep everyone in the loop. Need to do so soon, and decide (during that meeting) who will be working on each road.

Some discussion of the idea of introducing one or more explicitly-typed intermediate languages. (Integrate the work by Pierrick Couderc?) It or they should be easy to type-check; the code of the checker should be close to a declarative specification. Jacques would like this language to be formally defined in Coq. Armaël notes that one could even have a type-checker for it implemented in Coq. (Analogous to what the F* people did?) Jacques and Xavier would like to do a proof of type soundness (preferably for a low-level calculus). A model of OCaml types in Iris could be interesting. Xavier wants types to have meaning. (This is the "high high road".)

TODO:
  Send a proposal for an open meeting.
  Scheduled together with a regular developers meeting?
  (Include Pierrick + Gabriel.)
  Propose a 2-day meeting. Starting late, finishing early. Research + dev.
